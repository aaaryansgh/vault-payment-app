
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user table
model User{
  id    String @id @default(uuid())
  email String @unique
  phone String @unique
  fullname  String @map("full_name")
  passwordHash String @map("password_hash")
  pinHash String @map("pin_hash")
  isActive Boolean @default(true) @map("is_Active")
  createdAt DateTime @default(now()) @map("pdated_at")
  bankAccounts BankAccount[]
  transactions Transactions[]
  vaults Vault[]
  beneficiaries Beneficiary[]
  receivedTransactions Transactions[] @relation("RecipientTransactions")
}

//Bank account table
model BankAccount{
  id String @id @default(uuid())
  userId String @map("user_id")
  accountNumber String @unique @map("account_number")
  ifscCode String @map("ifsc_code")
  bankName String @map("bank_name")
  accountHolderName String @map("account_holder_name")
  balance Decimal @default(0) @db.Decimal(15,2)
  isPrimary Boolean @default(false) @map("is_primary")
  isVerified Boolean @default(false) @map("is_verified")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user User @relation(fields:[userId],references: [id], onDelete: Cascade)
  transactions Transactions[]
  vaults Vault[]
  @@map("Bank_account")
}
// Vault table
model Vault{
  id String @id @default(uuid())
  userId String @map("user_id")
  bankAccountId String @map("bank_account_id")
  vaultName String @map("vault_name")
  vaultType String @map("vault_type")
  allocatedAmount Decimal @default(0) @db.Decimal(15,2) @map("allocated_amount")
  spentAmount Decimal @default(0) @db.Decimal(15,2) @map("spent_amount")
  icon String @default("ðŸ’°")
  budgetPeriod String @default("monthly") @map("budget_period")
  autoRefill Boolean @default(false) @map("auto_refill")
  isActive Boolean @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  transactions Transactions[]
  vaultTransactions VaultTransaction[]
  @@map("Vaults")
}
model Transactions{
  id                   String   @id @default(uuid())
  transactionRef       String   @unique @map("transaction_ref")
  userId               String   @map("user_id")
  vaultId              String?  @map("vault_id")
  bankAccountId        String   @map("bank_account_id")
  transactionType      String   @map("transaction_type") // debit, credit, transfer
  category             String? // p2p, bill, merchant, refund, vault_allocation
  amount               Decimal  @db.Decimal(15, 2)
  description          String?
  recipientId          String?  @map("recipient_id")
  recipientPhone       String?  @map("recipient_phone")
  recipientUpi         String?  @map("recipient_upi")
  status               String   @default("pending") // pending, processing, completed, failed, reversed
  paymentMethod        String?  @map("payment_method") // upi, card, bank_transfer, wallet, vault
  gatewayTransactionId String?  @map("gateway_transaction_id")
  gatewayResponse      Json?    @map("gateway_response")
  fee                  Decimal  @default(0) @db.Decimal(10, 2)
  tax                  Decimal  @default(0) @db.Decimal(10, 2)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  vault             Vault?             @relation(fields: [vaultId], references: [id], onDelete: SetNull)
  bankAccount       BankAccount        @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  recipient         User?              @relation("RecipientTransactions", fields: [recipientId], references: [id], onDelete: SetNull)
  vaultTransactions VaultTransaction[]

  @@map("transactions")
}

model VaultTransaction{
  id String @id @default(uuid())
  vaultId String @map("vault_id")
  transactionId String @map("transaction_id")
  amount Decimal @db.Decimal(15,2)
  transactionType String @map("transaction_type")
  createdAt DateTime @default(now()) @map("created_at")
  vault Vault @relation(fields:[vaultId],references: [id],onDelete: Cascade)
  transaction Transactions @relation(fields: [transactionId], references:[id], onDelete: Cascade)

  @@map("vault_transaction")
}

model Beneficiary{
  id String @id @default(uuid())
  userId String @map("user_id")
  beneficiaryName String @map("beneficiary_name")
  beneficiaryPhone String @map("beneficiary_phone")
  beneficiaryUpi String @map("beneficiary_upi")
  beneficiaryAccountNumber String? @map("beneficiary_account_number")
  isFav Boolean @default(false) @map("is_fav")
  createdAt DateTime @default(now()) @map("created_at")
  user User @relation(fields:[userId],references: [id], onDelete: Cascade)
  @@map("beneficiaries")
}